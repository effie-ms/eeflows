# -*- coding: utf-8 -*-
# Generated by Django 1.11.27 on 2020-02-18 15:14
from __future__ import unicode_literals

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="BioPeriod",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                (
                    "January",
                    models.IntegerField(
                        choices=[
                            (1, "Overwintering"),
                            (2, "Spring Spawning"),
                            (3, "Rearing and Growth"),
                            (4, "Fall Spawning"),
                        ],
                        default=1,
                    ),
                ),
                (
                    "February",
                    models.IntegerField(
                        choices=[
                            (1, "Overwintering"),
                            (2, "Spring Spawning"),
                            (3, "Rearing and Growth"),
                            (4, "Fall Spawning"),
                        ],
                        default=1,
                    ),
                ),
                (
                    "March",
                    models.IntegerField(
                        choices=[
                            (1, "Overwintering"),
                            (2, "Spring Spawning"),
                            (3, "Rearing and Growth"),
                            (4, "Fall Spawning"),
                        ],
                        default=2,
                    ),
                ),
                (
                    "April",
                    models.IntegerField(
                        choices=[
                            (1, "Overwintering"),
                            (2, "Spring Spawning"),
                            (3, "Rearing and Growth"),
                            (4, "Fall Spawning"),
                        ],
                        default=2,
                    ),
                ),
                (
                    "May",
                    models.IntegerField(
                        choices=[
                            (1, "Overwintering"),
                            (2, "Spring Spawning"),
                            (3, "Rearing and Growth"),
                            (4, "Fall Spawning"),
                        ],
                        default=2,
                    ),
                ),
                (
                    "June",
                    models.IntegerField(
                        choices=[
                            (1, "Overwintering"),
                            (2, "Spring Spawning"),
                            (3, "Rearing and Growth"),
                            (4, "Fall Spawning"),
                        ],
                        default=2,
                    ),
                ),
                (
                    "July",
                    models.IntegerField(
                        choices=[
                            (1, "Overwintering"),
                            (2, "Spring Spawning"),
                            (3, "Rearing and Growth"),
                            (4, "Fall Spawning"),
                        ],
                        default=3,
                    ),
                ),
                (
                    "August",
                    models.IntegerField(
                        choices=[
                            (1, "Overwintering"),
                            (2, "Spring Spawning"),
                            (3, "Rearing and Growth"),
                            (4, "Fall Spawning"),
                        ],
                        default=3,
                    ),
                ),
                (
                    "September",
                    models.IntegerField(
                        choices=[
                            (1, "Overwintering"),
                            (2, "Spring Spawning"),
                            (3, "Rearing and Growth"),
                            (4, "Fall Spawning"),
                        ],
                        default=3,
                    ),
                ),
                (
                    "October",
                    models.IntegerField(
                        choices=[
                            (1, "Overwintering"),
                            (2, "Spring Spawning"),
                            (3, "Rearing and Growth"),
                            (4, "Fall Spawning"),
                        ],
                        default=4,
                    ),
                ),
                (
                    "November",
                    models.IntegerField(
                        choices=[
                            (1, "Overwintering"),
                            (2, "Spring Spawning"),
                            (3, "Rearing and Growth"),
                            (4, "Fall Spawning"),
                        ],
                        default=4,
                    ),
                ),
                (
                    "December",
                    models.IntegerField(
                        choices=[
                            (1, "Overwintering"),
                            (2, "Spring Spawning"),
                            (3, "Rearing and Growth"),
                            (4, "Fall Spawning"),
                        ],
                        default=4,
                    ),
                ),
            ],
            options={"verbose_name_plural": "Bioperiods",},
        ),
        migrations.CreateModel(
            name="FET",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("fet_name", models.CharField(max_length=255)),
                ("fet_short_label", models.CharField(max_length=255)),
            ],
            options={"verbose_name_plural": "FETs",},
        ),
        migrations.CreateModel(
            name="FishCoefficients",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("winter", models.FloatField(verbose_name="Overwintering")),
                ("spring", models.FloatField(verbose_name="Spring Spawning")),
                ("summer", models.FloatField(verbose_name="Rearing and Growth")),
                ("autumn", models.FloatField(verbose_name="Fall Spawning")),
            ],
            options={"verbose_name_plural": "Fish coefficients",},
        ),
        migrations.CreateModel(
            name="Station",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                (
                    "hydrological_data",
                    models.FileField(
                        null=True,
                        upload_to="uploads/hydrological_data/%Y/%m/%d/",
                        validators=[
                            django.core.validators.FileExtensionValidator(
                                allowed_extensions=["xlsx"]
                            )
                        ],
                    ),
                ),
                ("catchment_area", models.FloatField()),
                (
                    "forecasting",
                    models.FileField(
                        null=True, upload_to="uploads/forecasting/%Y/%m/%d/"
                    ),
                ),
                ("longitude", models.FloatField()),
                ("latitude", models.FloatField()),
                ("river_body", models.CharField(max_length=255)),
                (
                    "river_FET",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT, to="stations.FET"
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="fet",
            name="base_p_coefficients",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="base_p_coefficients",
                to="stations.FishCoefficients",
            ),
        ),
        migrations.AddField(
            model_name="fet",
            name="bioperiods_months",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT, to="stations.BioPeriod"
            ),
        ),
        migrations.AddField(
            model_name="fet",
            name="critical_p_coefficients",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="critical_p_coefficients",
                to="stations.FishCoefficients",
            ),
        ),
        migrations.AddField(
            model_name="fet",
            name="subsistence_p_coefficients",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="subsistence_p_coefficients",
                to="stations.FishCoefficients",
            ),
        ),
    ]
